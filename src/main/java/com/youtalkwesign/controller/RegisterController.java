package com.youtalkwesign.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.youtalkwesign.model.Authority;
import com.youtalkwesign.model.User;
import com.youtalkwesign.repository.AuthorityRepository;
import com.youtalkwesign.repository.UserRepository;

@Controller
public class RegisterController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private AuthorityRepository authorityRepository;

    @Autowired
    private AuthenticationManager authenticationManager;

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String displayRegisterPage(ModelMap model) {
		// to make available for binding, we need default user
		model.addAttribute("user", new User());
		return "register-fragment :: result";		
	}
	
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String register(@Valid User user, BindingResult result, HttpServletRequest request) {
		if (result.hasErrors()) {
			String str = "redirect:/?validation";
			List<FieldError> errors = result.getFieldErrors();
			for (int i = 0; i < errors.size(); i++) {
				if (errors.get(i).getDefaultMessage().indexOf("Username is null!") != -1) {
					str = str + "&" + "username";
				}
				if (errors.get(i).getDefaultMessage().indexOf("Password is null!") != -1) {
					str = str + "&" + "password";
				}
				if (errors.get(i).getDefaultMessage().indexOf("E-mail is null!") != -1) {
					str = str + "&" + "emailNull";
				}
				if (errors.get(i).getDefaultMessage().indexOf("Invalid E-mail!") != -1) {
					str = str + "&" + "emailInvalid";
				}
			}			
			return str;
		} else {
			User check = userRepository.findOne(user.getUsername());
			if (check == null) {
				userRepository.save(user);

				Authority auth = new Authority();
				auth.setUsername(user.getUsername());
				auth.setRole("ROLE_USER");
				authorityRepository.save(auth);
				
				// after successfully creating user (auto-login)
		        authenticateUserAndSetSession(user, request);
		        
				return "redirect:/?success";
			} else { // it means that this username exists
				return "redirect:/?exists";
			}
		}	
	}
	
	private void authenticateUserAndSetSession(User user, HttpServletRequest request) {
        String username = user.getUsername();
        String password = user.getPassword();
        UsernamePasswordAuthenticationToken token = 
        		new UsernamePasswordAuthenticationToken(username, password);

        // generate session if one doesn't exist
        request.getSession();

        token.setDetails(new WebAuthenticationDetails(request));
        Authentication authenticatedUser = authenticationManager.authenticate(token);

        SecurityContextHolder.getContext().setAuthentication(authenticatedUser);
    }
}
